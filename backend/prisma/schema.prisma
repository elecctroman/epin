generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  password       String
  role           Role      @default(USER)
  emailVerified  DateTime?
  twoFactorSecret String?
  balance        Decimal   @default(0)
  apiTokens      ApiToken[]
  orders         Order[]
  tickets        Ticket[]
  notifications  Notification[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

model ApiToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Product {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  category    String
  price       Decimal
  description String
  image       String?
  keys        Key[]
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Key {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  code       String   @unique
  isUsed     Boolean  @default(false)
  usedAt     DateTime?
  order      Order?
  createdAt  DateTime @default(now())
  deletedAt  DateTime?
}

model Order {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  key        Key?     @relation(fields: [keyId], references: [id])
  keyId      String?
  paymentId  String
  status     OrderStatus
  amount     Decimal
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Ticket {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  subject   String
  message   String
  status    TicketStatus @default(OPEN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Notification {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
